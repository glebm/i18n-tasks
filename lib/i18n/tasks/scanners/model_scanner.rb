module I18n::Tasks::Scanners
  
  # Parses model attribute lists as generated by the 'annotate' gem
  #
  class ModelScanner < FileScanner
    include I18n::Tasks::Scanners::OccurrenceFromPosition
    
    def initialize(**args)
      super
      @patterns = [
        [/\#  (?<a>[\w_]+)/, 'activerecord.attributes.%{model}.%{a}']
      ]
    end
    
    MODEL_NAME = /[^\/]+(?=\.rb)/
    
    def scan_file(path)
      return [] unless path =~ /.*\/models\/.*.rb/
      model = path[MODEL_NAME]
      text = read_file(path)
      @patterns.flat_map do |pattern, key|
        result = []
        text.scan(pattern) do |_|
          match    = Regexp.last_match
          matches  = Hash[match.names.map(&:to_sym).zip(match.captures)]
          matches[:model] = model
          occ = occurrence_from_position(path, text, match.offset(0).first)
          occ = Results::Occurrence.new(
              path: occ.path, pos: occ.pos, 
              line_num: occ.line_num, line_pos: occ.line_pos, line: occ.line,
              raw_key: matches[:a], default_arg: nil)
          result << [key % matches, occ]
        end
        result
      end
    end
  end
end
